The Travelling Salesman problem (TSP) is a well-known problem in computer science. Roughly speaking, it refers to a salesperson who must deliver packages in cities that are modelled through a weighted graph, and the objective is to find the optimal route such that the total distance travelled is minimized.

This problem is known for its complexity and for the fact that it is a NP-hard problem, which means that there is no polynomial-time solution (assuming P != NP).

The problem we must solve is, in fact, a specific variant of the TSP, called Vehicle Routing Problem (VRP) which is different from the TSP inasmuch as there are now multiple salespeople (couriers). We will, in addition, add following constraints:

- Each courier has a limited space he/she can carry

- New orders may appear during the trips, so the 

- Order may have time-constrained pickup/delivery times: if it can't be picked up/delivered by some time, it's no use.

I can assume I'm given:

- A reliable estimate of the time it will take a courier to go from point A to point B

- The capacity each courier can carry at any one time (in litres) and the volume of each package.

Supposing we have to develop a quick solution just to start off with, **without looking at how other people have solved this**, here's what I would propose:

> These are not optimal solutions. They're just initial solutions that gets the job done quickly.

Our problem can be approached like this:

> Given a steady stream of new packages, how to I assign couriers to a) pick up the packages and b) deliver those packages, so as to minimize the total amount of time/distance travelled by the couriers.


#######################################################
## Version 1 (Blocking; sequential order processing)
#######################################################


### Assumptions

- I would split the city into a number of non-overlapping **sectors** and suppose I have some number of couriers either active or waiting in each of those sectors. 

    - Let's assume that orders within those sectors are considered to be "nearby" so that, on average, adding a pickup/deliver order to a courier that's active inside that sector is considered to be acceptable
 
    - This also reduces the penalty that a courier incurs if he/she must pickup/deliver orders sequentially, rather than concurrently (only valid for orders that are completely within that sector)

- Let's assume that each courier has a *delivery list*, which are the next orders he/she will fulfill and, when we `push` an order to a courier, it means that we will add that order to the end of his/her delivery list.

    - COURIER c : [ order o1 | order 02 | order o3 ...  ]
                  -----------------------------------> time

 - We can also `insert` an order into an arbitrary place in his/her list (e.g. for time-constrained orders that must be picked-up/delivered at a given time)

- All other things being equal, we would rather assign a new order to an active courier, so as to avoid him/her becoming *inactive*.

- We need to keep a pool of waiting couriers (for orders no active courier can take) but it must be as small as possible, because it costs money to keep them waiting and, while they are waiting, they don't generate any money for us.

    - in other words, we also want to be able to deliver all orders using the smallest possible amount of couriers, if possible 

### The algorithm

function: get_couriers_who_at_the_end_of_their_lists_will_be_in_sector(x)
  return all active couriers who, **by the end of their respective order lists**, will have x as base sector,
  with couriers with smallest order lists first    

function: get_adjacent_sectors(x)
  return sectors which are adjacent to x



for each new order o:

   for each sector s: 

       if o is completely within sector s:

          if o is NOT time-constrained:

                couriers <- get_couriers_who_at_the_end_of_their_lists_will_be_in_sector(s)
                                
                if couriers is not empty:
                    c <- couriers.get_first()
                    push o to c
                
                else: // no active couriers available in sector s
                
                    ss  <- get_adjacent_sectors(s)
                    couriers_in_adjacent_sectors <- get_couriers_who_at_the_end_of_their_lists_will_be_in_sector(ss)
                    
                    if couriers_in_adjacent_sectors is not empty:
                        c <- couriers_in_adjacent_sectors.get_first()
                        push o to c
                    
                    else // no available active couriers even in adjacent sectors       
                        c <- get_first_waiting_courier()
                        push o to c

            else: // o IS time-constrained
                    
                candidate_couriers <- get_couriers_who_at_the_end_of_their_lists_will_be_in_sector(s)        
                         
                if candidate_couriers is not empty         
                         
                    for each active courier c in candidate_couriers:

                        if all orders after o's pickup time are NOT time-constrained 
                        AND the state of c's trunk supports the addition of a package as large as o:
                                
                            insert o in c's delivery list, after the first order that
                            can be picked/up delivered before o's pickup time, given the time estimates
                            and shift all other orders after that

                else: // no candidate couriers in base sector s

                    ss <- get_adjacent_sectors(s)
                    candidate_couriers <- get_couriers_who_at_the_end_of_their_lists_will_be_in_sector(ss) 
                    

                    if candidate_couriers is not empty         
                         
                        for each active courier c in candidate_couriers:

                            if all orders after o's pickup time are NOT time-constrained 
                            AND the state of c's trunk supports the addition of a package as large as o:
                                    
                                insert o in c's delivery list, after the first order that
                                can be picked/up delivered before o's pickup time, given the time estimates
                                and shift all other orders after that

                    else // no active couriers could be found, even in adjacent sectors
                        c <- get_first_waiting_courier()
                        push o to c

   else: // this order spans multiple sectors

          a <- o.pickup.get_sector() 
          
          if O is NOT time-constrained
              couriers <- get_couriers_who_at_the_end_of_their_lists_will_be_in_sector(s)
              
              if couriers is not empty:
                    c <- couriers.get_first()
                    push o to c
              
              else: // no active couriers available in sector s
                    ss  <- get_adjacent_sectors(s)
                    couriers_in_adjacent_sectors <- get_couriers_who_at_the_end_of_their_lists_will_be_in_sector(ss)
   
                    if couriers_in_adjacent_sectors is not empty:
                        c <- couriers_in_adjacent_sectors.get_first()
                        push o to c 
                                              
                    else // no available active couriers even in adjacent sectors       
                        c <- get_first_waiting_courier()
                        push o to c
                        

          else: // order IS time-constrained
                         
                candidate_couriers <- get_couriers_who_at_the_end_of_their_lists_will_be_in_sector(s)        
                         
                if candidate_couriers is not empty         
                         
                    for each active courier c in candidate_couriers:

                        if all orders after o's pickup time are NOT time-constrained 
                        AND the state of c's trunk supports the addition of a package as large as o:
                                
                            insert o in c's delivery list, after the first order that
                            can be picked/up delivered before o's pickup time, given the time estimates
                            and shift all other orders after that

                else: // no candidate couriers in base sector s

                    ss <- get_adjacent_sectors(s)
                    candidate_couriers <- get_couriers_who_at_the_end_of_their_lists_will_be_in_sector(ss) 
                    

                    if candidate_couriers is not empty         
                         
                        for each active courier c in candidate_couriers:

                            if all orders after o's pickup time are NOT time-constrained 
                            AND the state of c's trunk supports the addition of a package as large as o:

                                insert o in c's delivery list, after the first order that
                                can be picked/up delivered before o's pickup time, given the time estimates
                                and shift all other orders after that

                    else // no active couriers could be found, even in adjacent sectors
                        c <- get_first_waiting_courier()
                        push o to c
              


### Notes

- if a courier delivers an order in sector B, that sector becomes his BASE sector for the day (unless it's changed again)

### Analysis

- if too many couriers get too burdened by this algorithm, we can adjust the following:

 - increase the size of the areas which will probably cause larger delivery queues for each courier
 
 - decrease the size of the areas (smaller areas will reduce the coverage area for each courier but may increase the number of order that span multiple areas)
 
 - add couriers
 
### Complexity

N = number of couriers
S = number of sectors

- the space complexity is as follows:

 - a list of orders for each active courier - O(N)
 
 - a list of couriers - O(N)

- time complexity:

 - worst case:

### Things that can go wrong

- a courier may decide to leave with a non-empty delivery list, in which case we must re-assign those orders

 - we could just re-add those order into the stream, as if they were new orders

- If we compare this algorithm to a processor that has to process tasks, each courier would be a processor with a **single-core and no multiprocessing capabilities**, i.e. it can't have two orders concurrently.

 - This means that each courier can't *interleave* orders (as a processor switches between processes that are doing slow tasks such as reading from disk) a courier will sit idle for a long time if we have a time-constrained order where the delivery time is hours or days after the pickup time.
 
 - One solution for this is, naturally, to allow each courier (core) to process multiple orders (processes) at the same time, keeping the packages (process context) in memory. We could use the same scheduling mechanisms a processor uses, and watch out for things like starvation.

### Other thoughts

- we could consider dynamic areas, instead of static ones (say a circle with radius d around the courier)

- or we could choose better areas, after we collect some data on which areas have more orders

- maybe we should calculate the best courier for a given order based upon where that courier will be after the delivery of the last order in his/her queue

- Consider cases when it's best for the courier not to pickup/deliver orders sequentially

 - But pickup both orders and then deliver both of them (i.e. add some sort of *concurrency*)


#######################################################
## Version 2 (Non Blocking; concurrent order processing)
#######################################################

The basic problem with the solution above is that orders can only be completed sequentially, and this is very wasteful in case, for instance, the courier has two long-distance orders and the two pickups are close to one another and the two deliveries are also close to one another.

Under the previous algorithm, the courier would pickup the first order, deliver that order and then come back to pickup the other order, which is very wasteful because it would be much more efficient to pickup both orders and then deliver both orders together.

An easy way to think of this is as each courier being a CPU that can "switch" between multiple processes (orders).

This forces us to consider the remaining space each courier has in his/her trunk, because this can only be done until there's enough space in the trunk.

So we can create a better version of the algorithm, addressing that.

We will also change the way we represent the orders for each courier. Each order has now two separate parts (pickup and delivery), which can be added to a courier's delivery list separately.

    - COURIER c : [ order o1 pickup | order 02 pickup | order o1 deliver | order o3 pickup | order 02 deliver | ...  ]
                  -----------------------------------> time  

### The algorithm


The case when the order is not time constrained and it is fully contained within a single sector is still the easiest, because we can just push that order to any courier who, at the end of his/her list, will be in that sector. This order can be completed sequentially (pickup and delivery one after the other.)




for each new order o:

   for each sector s: 

       if o is completely within sector s:

          if o is NOT time-constrained:

                couriers <- get_couriers_who_at_the_end_of_their_lists_will_be_in_sector(s)
                                
                if couriers is not empty:
                    c <- couriers.get_first()
                    push o to c
                
                else: // no active couriers available in sector s
                
                    ss  <- get_adjacent_sectors(s)
                    couriers_in_adjacent_sectors <- get_couriers_who_at_the_end_of_their_lists_will_be_in_sector(ss)
                    
                    if couriers_in_adjacent_sectors is not empty:
                        c <- couriers_in_adjacent_sectors.get_first()
                        push o to c
                    
                    else // no available active couriers even in adjacent sectors       
                        c <- get_first_waiting_courier()
                        push o to c

            else: // o IS time-constrained
                    
                candidate_couriers <- get_couriers_who_at_the_end_of_their_lists_will_be_in_sector(s)        
                         
                if candidate_couriers is not empty         
                         
                    for each active courier c in candidate_couriers:

                        if all orders after o's pickup time are NOT time-constrained 
                        AND the state of c's trunk supports the addition of a package as large as o:
                                
                            insert o in c's delivery list, after the first order that
                            can be picked/up delivered before o's pickup time, given the time estimates
                            and shift all other orders after that

                else: // no candidate couriers in base sector s

                    ss <- get_adjacent_sectors(s)
                    candidate_couriers <- get_couriers_who_at_the_end_of_their_lists_will_be_in_sector(ss) 
                    

                    if candidate_couriers is not empty         
                         
                        for each active courier c in candidate_couriers:

                            if all orders after o's pickup time are NOT time-constrained 
                            AND the state of c's trunk supports the addition of a package as large as o:
                                    
                                insert o in c's delivery list, after the first order that
                                can be picked/up delivered before o's pickup time, given the time estimates
                                and shift all other orders after that

                    else // no active couriers could be found, even in adjacent sectors
                        c <- get_first_waiting_courier()
                        push o to c

   else: // this order spans multiple sectors

          a <- o.pickup.get_sector() 
          
          if O is NOT time-constrained
              couriers <- get_couriers_who_at_the_end_of_their_lists_will_be_in_sector(s)
              
              if couriers is not empty:
                    c <- couriers.get_first()
                    push o to c
              
              else: // no active couriers available in sector s
                    ss  <- get_adjacent_sectors(s)
                    couriers_in_adjacent_sectors <- get_couriers_who_at_the_end_of_their_lists_will_be_in_sector(ss)
   
                    if couriers_in_adjacent_sectors is not empty:
                        c <- couriers_in_adjacent_sectors.get_first()
                        push o to c 
                                              
                    else // no available active couriers even in adjacent sectors       
                        c <- get_first_waiting_courier()
                        push o to c
                        

          else: // order IS time-constrained
                         
                candidate_couriers <- get_couriers_who_at_the_end_of_their_lists_will_be_in_sector(s)        
                         
                if candidate_couriers is not empty         
                         
                    for each active courier c in candidate_couriers:

                        if all orders after o's pickup time are NOT time-constrained 
                        AND the state of c's trunk supports the addition of a package as large as o:
                                
                            insert o in c's delivery list, after the first order that
                            can be picked/up delivered before o's pickup time, given the time estimates
                            and shift all other orders after that

                else: // no candidate couriers in base sector s

                    ss <- get_adjacent_sectors(s)
                    candidate_couriers <- get_couriers_who_at_the_end_of_their_lists_will_be_in_sector(ss) 
                    

                    if candidate_couriers is not empty         
                         
                        for each active courier c in candidate_couriers:

                            if all orders after o's pickup time are NOT time-constrained 
                            AND the state of c's trunk supports the addition of a package as large as o:

                                insert o in c's delivery list, after the first order that
                                can be picked/up delivered before o's pickup time, given the time estimates
                                and shift all other orders after that

                    else // no active couriers could be found, even in adjacent sectors
                        c <- get_first_waiting_courier()
                        push o to c
              




------------------------------------------------------

### Other considerations

Maybe we are approaching this from the wrong perspective. Maybe it would be just better to broadcast every order to all couriers and have them say who wants to execute each order. 

This way we delegate all processing to them and we don't have to calculate the routes and lists ourselves. They can each look at what they have to do that day and, when each order arrives, they can say whether they want to do that or not. We can keep them "honest" by thinking of incentives for them not to "bite more than they can chew" doing things like:

    - punish/ couriers who accept orders and then don't do them.

    - keep a    

    - publishing the orders first to people who are currently in the vicinity of the pickup sector. If nobody there accepts, then we grows the search radius incrementally.

        - in particular for time-constrained orders, we could only publish the order to couriers who we know can reach the pickup area by the time it needs to be picked up.